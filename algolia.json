[{"content":"Preface This section describes how to use Hugo to create a personal static document library and deploy it to GitHub.\n","date":1508426775,"description":"Text about this post","lastmod":"2019-10-26T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://huiyuhui.github.io/","publishdate":"2018-11-23T15:26:15Z","title":"Home Title"},{"content":"Hugo is a static site engine written in Go.\nIt makes use of a variety of open source projects including:\n Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.\n","date":1397001600,"description":"","lastmod":"2014-04-09T00:00:00Z","objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://huiyuhui.github.io/about/","publishdate":"2014-04-09T00:00:00Z","title":"About Hugo"},{"content":"aaaaaa\nvvvv\naaa\n","date":1508248845,"description":"","lastmod":"2017-10-17T14:00:45Z","objectID":"29f9eeda1628d185706c1b67c78c501d","permalink":"https://huiyuhui.github.io/archives/hello_world/","publishdate":"2017-10-17T14:00:45Z","title":"Hello_world"},{"content":"aaaaaa\nvvvv\naaa\n","date":1510927245,"description":"","lastmod":"2017-11-17T14:00:45Z","objectID":"5869c73a22394f8efb64bd831f9bc83f","permalink":"https://huiyuhui.github.io/archives/hello_world1/","publishdate":"2017-11-17T14:00:45Z","title":"Hello_world1"},{"content":"aaaaaa\nvvvv\naaa\n","date":1513519245,"description":"","lastmod":"2017-12-17T14:00:45Z","objectID":"9315537b53139ed086cd4a65014c2257","permalink":"https://huiyuhui.github.io/archives/hello_world2/","publishdate":"2017-12-17T14:00:45Z","title":"Hello_world2"},{"content":"aaaaaa\nvvvv\naaa\n","date":1508248845,"description":"","lastmod":"2017-10-17T14:00:45Z","objectID":"93670bf9cab42e0169e3ce382c755e59","permalink":"https://huiyuhui.github.io/blog/hello_world/","publishdate":"2017-10-17T14:00:45Z","title":"Hello_world"},{"content":"aaaaaa\nvvvv\naaa\n","date":1510927245,"description":"","lastmod":"2017-11-17T14:00:45Z","objectID":"31c23d923d63baa3965e3789ebf4b1a3","permalink":"https://huiyuhui.github.io/blog/hello_world1/","publishdate":"2017-11-17T14:00:45Z","title":"Hello_world1"},{"content":"aaaaaa\nvvvv\naaa\n","date":1513519245,"description":"","lastmod":"2017-12-17T14:00:45Z","objectID":"fa1a6d2f3f583c420f9fbca139058eb5","permalink":"https://huiyuhui.github.io/blog/hello_world2/","publishdate":"2017-12-17T14:00:45Z","title":"Hello_world2"},{"content":" Run the command Hugo new site MyDoc in any local directory to create a local document library.\nWhere MyDoc is the name of the document library you want to create. Run the command tree to check the directory.  Archetypes: Save default.md, header file format Content：Save blog posts (markdown files) data：Save custom template, imported toml file or JSON, yaml file layouts：Save the template files of the website static：Save static resources such as pictures and CSS config.toml：Configuration files for websites   Open git bash and run the following command to download the theme:\ncd D:/Huiyuhui/MyDoc Git clone https://github.com/h-enk/doks.git themes/techdoc Run the following command to set the theme in the file config.toml.\necho ‘theme=”docsy”’ \u0026amp;raquo; config.toml Run the following command to generate the static pages:\nhugo serve After running successfully, you can access http://localhost:1313/ to check your document.  ","date":1508253975,"description":"","lastmod":"2017-10-17T15:26:15Z","objectID":"e6c40622f3e32a3ae8baa3511e93b58c","permalink":"https://huiyuhui.github.io/chapter1/","publishdate":"2017-10-17T15:26:15Z","title":"Create Static Document Library"},{"content":"1.Visit github official website to sign up?\n2.Create your Personal repository.\n3.Run the command hugo \u0026amp;ndash;theme=techdoc \u0026amp;ndash;baseURL=\u0026amp;ldquo;https://huiyuhui.github.io/\u0026amp;quot; to generate the pages.\n4.Enter the folder \u0026amp;ldquo;public\u0026amp;rdquo;, and run the following command to push the local files to your repository.\ngit init\n** remote add origin https://github.com/huiyuhui/huiyuhui.github.io.git**\n**git add -A**\n**git commit -m \u0026amp;ldquo;first commit\u0026amp;rdquo;**\n**git push -u origin master**\n5.??????????\n","date":1508253975,"description":"","lastmod":"2017-10-17T15:26:15Z","objectID":"d15edf0db850266aaefbd84dd62ddf78","permalink":"https://huiyuhui.github.io/chapter2/","publishdate":"2017-10-17T15:26:15Z","title":"Configure the Static Pages to Github"},{"content":"aaaaaa\nvvvv\naaa\n","date":1508248845,"description":"","lastmod":"2017-10-17T14:00:45Z","objectID":"9a98ee2c3742d5ec977b28f6df756dec","permalink":"https://huiyuhui.github.io/entry/hello_world/","publishdate":"2017-10-17T14:00:45Z","title":"Hello_world"},{"content":"aaaaaa\nvvvv\naaa\n","date":1510927245,"description":"","lastmod":"2017-11-17T14:00:45Z","objectID":"a8ae0d1b823f41f12d7995f10a5c2dde","permalink":"https://huiyuhui.github.io/entry/hello_world1/","publishdate":"2017-11-17T14:00:45Z","title":"Hello_world1"},{"content":"aaaaaa\nvvvv\naaa\n","date":1513519245,"description":"","lastmod":"2017-12-17T14:00:45Z","objectID":"8628bf7bda73a7617888d17ad2064262","permalink":"https://huiyuhui.github.io/entry/hello_world2/","publishdate":"2017-12-17T14:00:45Z","title":"Hello_world2"},{"content":"Main Process  Environmental preparation Create personal static document library Deploy static pages to GitHub  ","date":-62135596800,"description":"Text about this post","objectID":"dfae1d937010a359c06f3a1a5f0b3f0a","permalink":"https://huiyuhui.github.io/getting-started/","title":"Operation Process"},{"content":"Hello world!\n","date":1508248845,"description":"","lastmod":"2017-10-17T14:00:45Z","objectID":"a37038ea9c0a627175646a70bd3fc060","permalink":"https://huiyuhui.github.io/hello_world/","publishdate":"2017-10-17T14:00:45Z","title":"Hello world!"},{"content":"Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026amp;rsquo;t cover using CSS to style your theme.\nWe\u0026amp;rsquo;ll start with creating a new site with a very basic template. Then we\u0026amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026amp;ldquo;$\u0026amp;rdquo; prompt. The output will follow. Lines that start with \u0026amp;ldquo;#\u0026amp;rdquo; are comments that I\u0026amp;rsquo;ve added to explain a point. When I show updates to a file, the \u0026amp;ldquo;:wq\u0026amp;rdquo; on the last line means to save the file.\nHere\u0026amp;rsquo;s an example:\n## this is a comment\r$ echo this is a command\rthis is a command\r## edit the file\r$ vi foo.md\r+++\rdate = \u0026amp;quot;2014-09-28\u0026amp;quot;\rtitle = \u0026amp;quot;creating a new theme\u0026amp;quot;\r+++\rbah and humbug\r:wq\r## show it\r$ cat foo.md\r+++\rdate = \u0026amp;quot;2014-09-28\u0026amp;quot;\rtitle = \u0026amp;quot;creating a new theme\u0026amp;quot;\r+++\rbah and humbug\r$\rSome Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell …","date":1411862400,"description":"","lastmod":"2014-09-28T00:00:00Z","objectID":"a3e7063a0e9e0c1d8d6ccd47a4b57e30","permalink":"https://huiyuhui.github.io/post/creating-a-new-theme/","publishdate":"2014-09-28T00:00:00Z","title":"Creating a New Theme"},{"categories":["Development","golang"],"content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026amp;ldquo;foo\u0026amp;rdquo;:\n{{ foo }}\r Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\r Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026amp;ldquo;bar\u0026amp;rdquo;\n{{ .Params.bar }}\r Parentheses can be used to group items together\n{{ if or (isset .Params \u0026amp;quot;alt\u0026amp;quot;) (isset .Params \u0026amp;quot;caption\u0026amp;quot;) }} Caption {{ end }}\r Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026amp;lt;title\u0026amp;gt;{{ .Title }}\u0026amp;lt;/title\u0026amp;gt;\r Variables can also be defined and referenced.\n{{ $address := \u0026amp;quot;123 Main St.\u0026amp;quot;}}\r{{ $address }}\r Functions Go template ship with a few functions which …","date":1396396800,"description":"","lastmod":"2014-04-02T00:00:00Z","objectID":"4f1f56186d2fece779068cd43c2d5eb2","permalink":"https://huiyuhui.github.io/post/goisforlovers/","publishdate":"2014-04-02T00:00:00Z","tags":["go","golang","templates","themes","development"],"title":"(Hu)go Template Primer"},{"categories":["Development","golang"],"content":"Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\rcd hugo\r/path/to/where/you/installed/hugo server --source=./docs\r\u0026amp;gt; 29 pages created\r\u0026amp;gt; 0 tags index created\r\u0026amp;gt; in 27 ms\r\u0026amp;gt; Web Server is available at http://localhost:1313\r\u0026amp;gt; Press ctrl+c to stop\r Once you\u0026amp;rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\r\u0026amp;gt; 29 pages created\r\u0026amp;gt; 0 tags index created\r\u0026amp;gt; in 27 ms\r\u0026amp;gt; Web Server is available at http://localhost:1313\r\u0026amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\r\u0026amp;gt; Press ctrl+c to stop\r Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026amp;gt; Change detected, rebuilding site\r\u0026amp;gt; 29 pages created\r\u0026amp;gt; 0 tags index created\r\u0026amp;gt; in 26 ms\r Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026amp;rsquo;s finished building. I double dare you. Having nearly …","date":1396396800,"description":"","lastmod":"2014-04-02T00:00:00Z","objectID":"507bc9792a164d425d567b4bf070f0a1","permalink":"https://huiyuhui.github.io/post/hugoisforlovers/","publishdate":"2014-04-02T00:00:00Z","tags":["go","golang","hugo","development"],"title":"Getting Started with Hugo"},{"content":"Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026amp;lt;root\u0026amp;gt;/\r▾ images/\rlogo.png\r should become\n▾ \u0026amp;lt;root\u0026amp;gt;/\r▾ static/\r▾ images/\rlogo.png\r Additionally, you\u0026amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026amp;rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site\rgit rm _site\rgit submodule add -b gh-pages git@github.com:your-username/your-repo.git public\r   Or, change the Hugo configuration to use _site instead of public.\n {\r..\r\u0026amp;quot;publishdir\u0026amp;quot;: \u0026amp;quot;_site\u0026amp;quot;,\r..\r}\r   Convert Jekyll templates to Hugo templates That\u0026amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026amp;rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026amp;rsquo;s template to learn Hugo\u0026amp;rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It\u0026amp;rsquo;s fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the …","date":1394409600,"description":"","lastmod":"2014-03-10T00:00:00Z","objectID":"7267aa86d808e09dc6676112f87f5e53","permalink":"https://huiyuhui.github.io/post/migrate-from-jekyll/","publishdate":"2014-03-10T00:00:00Z","title":"Migrate to Hugo from Jekyll"},{"content":"#我的静态文档库\n 在本地任意目录下执行命令Hugo new site MyDoc创建本地文档库 执行命令tree查看目录结构，如下所示：  Archetypes：存放default.md，头文件格式 Content：存放博客文章（markdown文件） data：存放自定义模板，导入的toml文件或json，yaml文件 layouts：存放网站的模板文件 static：存放图片，css等静态资源 config.toml：网站的配置文件   进入git bash执行以下命令下载主题\ncd d:\ncd Huiyuhui/MyDoc\nGit clone https://github.com/h-enk/doks.git themes/doks 执行以下命令设置主题\necho ‘theme=”docsy”’ \u0026amp;raquo; config.toml 执行以下命令测试网站是否成功\nhugo serve 运行成功后通过浏览器访问config文件中的网址即可  ","date":1617373004,"description":"","lastmod":"2021-04-02T22:16:44+08:00","objectID":"49ebe082ffb56cc7b9aff3378d7c990e","permalink":"https://huiyuhui.github.io/post/%E5%88%9B%E5%BB%BA%E9%9D%99%E6%80%81%E6%96%87%E6%A1%A3%E5%BA%93/","publishdate":"2021-04-02T22:16:44+08:00","title":"使用Hugo创建静态文档库"},{"content":"#Hugo安装 1.访问Hugo官网下载Hugo安装包hugo_extended_0.80.0_Windows-64bit.zip。 2.解压hugo安装包至D:hugo目录。 3.打开控制面板，选择系统 高级系统设置页面。 4.设置环境变量。 5.cmd窗口中执行hugo version命令查看安装是否成功。 #GIT安装 1.访问Git官网下载安装包。 2.一路点击next完成安装。\n","date":1617373004,"description":"","lastmod":"2021-04-02T22:16:44+08:00","objectID":"381139ba4977a8c2e54c525bb9061db9","permalink":"https://huiyuhui.github.io/post/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/","publishdate":"2021-04-02T22:16:44+08:00","title":"我的静态文档库"},{"content":"Installing Hugo 1.Visit Hugo official website to download the package, such as hugo_extended_0.80.0_Windows-64bit.zip.\n2.Unzip hugo package to the folder D:hugo.\n3.Open the Control Panel, and select System \u0026amp;gt; Advanced System Settings.\n4.Setting the environment variables for Windows system.\n5.Run the command Hugo version in CMD window to check whether the Hugo is installed successfully.\nInstalling GIT 1.Visit Git official website to download the Git package.\n2.Click Next until the Git is installed completely.\n","date":1508253975,"description":"this is a sample document.","lastmod":"2017-10-17T15:26:15Z","objectID":"0f64b20c75b5e6cb4f27fc7bf66b4c6c","permalink":"https://huiyuhui.github.io/sample/","publishdate":"2017-10-17T15:26:15Z","title":"Environmental Preparation"},{"content":"#Hugo安装 1.访问Hugo官网下载Hugo安装包hugo_extended_0.80.0_Windows-64bit.zip。 2.解压hugo安装包至D:hugo目录。 3.打开控制面板，选择系统 高级系统设置页面。 4.设置环境变量。 5.cmd窗口中执行hugo version命令查看安装是否成功。 #GIT安装 1.访问Git官网下载安装包。 2.一路点击next完成安装。\n","date":1617373004,"description":"","lastmod":"2021-04-02T22:16:44+08:00","objectID":"ea9a9a1bf415ad4328edabef55380bd3","permalink":"https://huiyuhui.github.io/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/","publishdate":"2021-04-02T22:16:44+08:00","title":"我的静态文档库"}]